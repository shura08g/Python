'''
http://www.s-anand.net/euler.html
Задача 12
Треугольное число с большим количеством делителей
(Треугольное число — это число точек, которые могут быть расставлены в форме
правильного треугольника (см. рисунок). Очевидно, с чисто арифметической
точки зрения, n-е треугольное число — это сумма n первых натуральных чисел)

Последовательность треугольных чисел образуется путем сложения натуральных
чисел.К примеру, 7-ое треугольное число равно 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
Первые десять треугольных чисел:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Перечислим делители первых семи треугольных чисел:

 1: 1
 3: 1, 3
 6: 1, 2, 3, 6
10: 1, 2, 5, 10
15: 1, 3, 5, 15
21: 1, 3, 7, 21
28: 1, 2, 4, 7, 14, 28
Как мы видим, 28 - первое треугольное число, у которого более пяти делителей.

Каково первое треугольное число, у которого более пятисот делителей?

The sequence of triangle numbers is generated by adding the natural numbers.
So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
The first ten terms would be:

1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

Let us list the factors of the first seven triangle numbers:

 1: 1
 3: 1,3
 6: 1,2,3,6
10: 1,2,5,10
15: 1,3,5,15
21: 1,3,7,21
28: 1,2,4,7,14,28
We can see that 28 is the first triangle number to have over five divisors.

What is the value of the first triangle number to have over five hundred
divisors?
'''

max_divisors = 100


def is_triangle(num):
    if num == 1:
        return True
    for i in range(1, num):
        if i * (i + 1) / 2 == num:
            return True
    return False


def max_triangular(divisors):
    limit = 1
    start = 1
    if divisors == 1:
        return start
    while limit < divisors:
        if is_triangle(start):
            # print("Num", start, end=' ')
            limit = 1
            for i in range(1, start):
                if start % i == 0:
                    limit += 1
            # print(":", limit, "|", end=' ')
        start += 1
    return start - 1


def print_seq(stop):
    for i in range(0, stop + 1):
        if is_triangle(i):
            print(i)


def divisor(divisors):
    limit = 0
    start = 1
    step = 2
    if divisors == 1:
        return start
    while limit < divisors:
        limit = 1
        # print(start, end=" ")
        for i in range(1, start):
            if start % i == 0:
                limit += 1
        start += step
        step += 1
    return start - step + 1


def eiler12():
    # print_seq(10)
    # result = max_triangular(max_divisors)
    limit = 0
    start = 1
    step = 2
    while limit < max_divisors:
        limit = 1
        # print(start, end=" ")
        for i in range(1, start):
            if start % i == 0:
                limit += 1
        start += step
        step += 1
    result = start - step + 1
    print("#12. Result = {} have {} divisors".format(result, limit))


if __name__ == "__main__":
    eiler12()
    # #12. Result = 73920 have 112 divisors [Finished in 1.2s]
    # 76576500
